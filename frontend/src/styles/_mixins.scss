/**
  SCREEN SIZES
*/

@use 'sass:math';

// Mixin for media query (min-width: breakpoint)
@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// Mixin for media query (min-width: breakpoint) and (max-width: breakpoint)
@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  
  } @else {
    @if (map-has-key($breakpoints, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    @if (map-has-key($breakpoints, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

/**
  Helper functions
*/

// Convert pixels to rem
@function to-rem($value) {
  $rem-value: (math.div($value, 16)) + rem;
  @return $rem-value;
}

/**
  Abstract browser prefixes
*/
@mixin browser-prefix($name, $value) {
  @each $attribute in ('-webkit-', '-moz-', '-ms-', '-o-', '') {
    #{$attribute}#{$name}: #{$value};
  }
}